---
- block:
  - name: "Load Post Data: {{ passwordstate_apicall }}"
    include_role:
      name: ansible-role-passwordstate
      tasks_from: createpostpayload
    when: passwordstate_postdata is defined

  - name: "Load Query String for {{ passwordstate_apicall }}"
    include_role:
      name: ansible-role-passwordstate
      tasks_from: createquerystring
    when: passwordstate_params is defined

  - name : Set the api_method so we can set the status code
    set_fact:
      api_method: "{{ 'POST' if passwordstate_postdata is search ('PasswordListID')
        else 'PUT' if passwordstate_postdata is search ('PasswordID')
        | default('GET') | upper }}"
    when: passwordstate_postdata is defined

  - name : Set the api_method so we can set the status code
    set_fact:
      api_method: 'GET'
    when: passwordstate_params is defined

  - name: Setup the URL based Passwords only
    set_fact:
      password_url: "{{ passwordstate_baseurl if api_method != 'GET' else
        '/'.join (( passwordstate_baseurl, passwordstate_params[0].value )) }}"
    when: passwordstate_params[1] is not defined

  - name: Setup the URL based on PasswordLists with no optional bypass of audit
    set_fact:
      password_url: "{{ passwordstate_baseurl if api_method != 'GET' else
        ''.join (( passwordstate_baseurl,
        '/', passwordstate_params[0].value,
        '?', passwordstate_params[1].key
        )) }}"
    when: passwordstate_params[1] is defined
      and passwordstate_params[2] is not defined

  - name: Setup the URL based on PasswordLists with optional bypass of audit
    set_fact:
      password_url: "{{ passwordstate_baseurl if api_method != 'GET' else
        ''.join (( passwordstate_baseurl,
        '/', passwordstate_params[0].value,
        '?', passwordstate_params[1].key,
        '&', passwordstate_params[2].key, '=', passwordstate_params[2].value
        )) }}"
    when: passwordstate_params[1] is defined
      and passwordstate_params[2] is defined

  # Fire the api call 
  - name: "{{ passwordstate_apicall }}"
    uri:
      url: "{{ password_url }}"
      validate_certs: "{{ validate_certs }}"
      headers:
        APIKey: "{{ passwords_apikey }}"
      method: "{{ api_method }}"
      return_content: yes
      status_code: "{{ '201' if api_method | upper == 'POST' else
        '200' if api_method | upper == 'PUT' else '200'}}"
      body: "{{ passwordstate_postpayload | default(omit) }}"
      body_format: json
    register: password
    changed_when:
      password.status == 201
      or ( password.status == 200 and api_method | upper == 'PUT' )
