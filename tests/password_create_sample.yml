################################################################################
# Scenario:
# Creating a new password based on a specific password generator ID and
# persisting to a specific PasswordList. The PasswordList is API backed so
# narrows the uniqueness by default
################################################################################
---
- hosts: localhost
  gather_facts: no

  ##############################################################################
  # searchpasswords allows the apikey to narrow the search criteria rather than
  # polling all password lists using the systemwide API KEY. This allows for
  # finer programatic access and mitigates duplicate responses.
  # Note that > 1 result will be returned if search criteria is not granular
  # enough!
  ##############################################################################

  vars:
    param_set:
        - key: 'title'
          value: "{{ ''.join (('Server', 100 |random(start=1, step=2) |
             string )) }}"
        - key: 'username'
          value: 'root'

  tasks:

  # Search for the PasswordListID initially since the API does not assume, which
  # is slightly odd behaviour The API key forces only a single response
  # PasswordList in this scenario.
  - name: Search for the PasswordListID
    vars:
      passwordstate_apicall: searchpasswords
      passwords_apikey: "{{ password_sample_apikey }}"
    include_role:
        name: ansible-role-passwordstate
  - debug:
      var: searchpasswords.json
      verbosity: 1

  - name: Set PasswordListID
    set_fact:
      passwordlistid: "{{ searchpasswords.json[0].PasswordListID }}"

  - name: Search for a password with specific API key access.
    vars:
      passwordstate_apicall: searchpasswords
      passwords_apikey: "{{ password_sample_apikey }}"
      passwordstate_params: "{{ param_set }}"
    include_role:
        name: ansible-role-passwordstate
  - debug:
      var: searchpasswords.json
      verbosity: 1

  - name: Validate results (zero allowed in this scenario)
    debug:
        msg:  "{{ searchpasswords.json |length }} results recieved.
          Record exists!"
    when: searchpasswords | json_query ( 'json[0].errors[0].message' )
      != 'Not Found'
    failed_when: searchpasswords | json_query ( 'json[0].errors[0].message' )
      != 'Not Found'

  - name: Generate a new Password
    vars:
      passwordstate_apicall: generatepassword
      passwordstate_params:
        - key: 'PasswordGeneratorID'
          value: '3'
    include_role:
        name: ansible-role-passwordstate
  - debug:
      var: generatepassword.json
      verbosity: 1

  - name: Create a new Password Entry for the new Object
    vars:
      # Create the postdata
      postdata:
        - key: 'PasswordListID'
          value: "{{ passwordlistid }}"
        - key: 'password'
          value: "{{ generatepassword.json[0].Password }}"

      passwordstate_apicall: passwords
      passwords_apikey: "{{ password_sample_apikey }}"
      passwordstate_postdata:
        "{{ postdata + param_set }}"
    include_role:
        name: ansible-role-passwordstate
  - debug:
      var: password.json
      verbosity: 1